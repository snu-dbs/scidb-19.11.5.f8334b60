# A very short test of the autochunking redimension() syntax.

--setup

--start-igdata
# These temp arrays are used merely to make the test execute faster.
# (The i=0:* syntax also exercises ability to create catalog arrays
# with unspecified chunk intervals.)
create temp array A_redim <v:int64>[i=0:*]
create temp array A_redim2 <v:int64>[i=0:*]
create temp array A_repart <v:int64>[i=0:*]
create temp array A <v:int64>[i=0:62499:0:100]
store(build(<v:int64>[i=0:62499,100,0], i*3+100), A)
--stop-igdata

--test

--echo "Build from an autochunked schema now works (all syntaxes)."
--start-igdata
build(<v:int64>[i=0:62499,*,0], i*3+100)
build(<v:int64>[i=0:62499:0:*], i*3+200)
build(<v:int64>[i=0:62499], i*3+300)
--stop-igdata

--echo "Input using an autochunked schema now works (all syntaxes)."
--start-igdata
input(<v:int64>[x=-180:180,*,0; y=-90:90,10,0], '/dev/null')
input(<v:int64>[x=-180:180:0:*; y=-90:90,10,0], '/dev/null')
input(<v:int64>[x=-180:180; y=-90:90,10,0], '/dev/null')
--stop-igdata

--echo Can redim and store though.
# Try with all syntaxes, and filter-compare to make sure all cells are the same.
--igdata "store(redimension(A, <v:int64>[i=0:*,*,0]), A_redim)"
--igdata "store(redimension(A, <v:int64>[i=0:*:0]), A_redim2)"
filter(join(A_redim as L, A_redim2 as R), L.v <> R.v)
--igdata "store(redimension(A, <v:int64>[i=0:*]), A_redim2)"
filter(join(A_redim as L, A_redim2 as R), L.v <> R.v)
--igdata "store(redimension(A, <v:int64>[i]), A_redim2)"
filter(join(A_redim as L, A_redim2 as R), L.v <> R.v)
_show_nodist(A_redim)

--echo Can repart and store.
# Try with all syntaxes, and filter-compare to make sure all cells are the same.
--igdata "store(repart(A, <v:int64>[i=0:*,*,0]), A_repart)"
--igdata "store(repart(A, <v:int64>[i=0:*:0]), A_repart2)"
filter(join(A_repart as L, A_repart2 as R), L.v <> R.v)
--igdata "store(repart(A, <v:int64>[i=0:*]), A_repart2)"
filter(join(A_repart as L, A_repart2 as R), L.v <> R.v)
--igdata "store(repart(A, <v:int64>[i]), A_repart2)"
filter(join(A_repart as L, A_repart2 as R), L.v <> R.v)
_show_nodist(A_repart)

--cleanup
remove(A)
remove(A_redim)
remove(A_redim2)
remove(A_repart)
remove(A_repart2)
