# This test exercises the new-style dimension syntax described at
# https://paradigm4.atlassian.net/wiki/display/DEV/Chunk+Intervals+16.6+Functional+Specification
#
# For each of several array shapes:
# - Create persistent array
# - Create temp array
# - Insert data
# - Store data
# - Insert more data

--setup

--test
--start-query-logging

--echo Create arrays whose dimensions have unspecified intervals.
create array I <v:int64>[i=0:99]
_show_nodist(I)
create array IJ <v:int64>[i=0:99;j=-180:180]
_show_nodist(IJ)
--error --code=scidb::SCIDB_SE_PARSER::SCIDB_LE_QUERY_PARSING_ERROR "create array bad_comma <v:int64>[i=0:99,j=-180:180]"
create array IJK <v:int64>[i=-100:-1:2; j=0:49:4; k=1:5]
_show_nodist(IJK)

--echo Show of query that scans array without intervals shows unspecified intervals.
_show2_nodist('scan(IJK)', 'afl')
_show2_nodist('apply(IJK, w, 42)', 'afl')

--echo Create temp arrays whose dimensions etc.

create temp array TI <v:int64>[i=0:99]
_show_nodist(TI)
create temp array TIJ <v:int64>[i=0:99;j=-180:180]
_show_nodist(TIJ)
--error --code=scidb::SCIDB_SE_PARSER::SCIDB_LE_QUERY_PARSING_ERROR "create temp array bad_comma <v:int64>[i=0:99,j=-180:180]"
create temp array TIJK <v:int64>[i=-100:-1:2; j=0:49:4; k=1:5]
_show_nodist(TIJK)

--echo Lone dimension identifiers in "create array" have unspecified chunk sizes.
create temp array E0 <v:int64>[i]
_show_nodist(E0)
create temp array E1 <v:int64>[i,j]
_show_nodist(E1)
create temp array E2 <v:int64>[i=0:199:0:200; j; k]
_show_nodist(E2)


--echo Use array w/ unspecified intervals as build() template, build() will use Dense1M.
--igdata "insert(build(I, 99-i), I)"
_show_nodist(I)
aggregate(I, sum(v))

--echo Insert with differently specified interval and LAR will repartition to 1000000.
--igdata "insert(build(<v:int64>[i=0:99,10,0], 99-i), I)"
_show_nodist(I)
aggregate(I, sum(v))

--echo build() uses Dense1M for temp arrays too.
--igdata "insert(build(TI, 99-i), TI)"
_show_nodist(TI)
aggregate(TI, sum(v))

--echo Insert [will] repartition to 1000000 for temp arrays too.
--igdata "insert(build(<v:int64>[i=0:99,10,0], 99-i), TI)"
_show_nodist(TI)
aggregate(TI, sum(v))

--echo Cannot use lone identifier for build().
--error --code=scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_OP_BUILD_ERROR3 "build(<v:int32>[i], 42)"

--echo Lone identifiers trigger autochunking for repart() and redimension()
# Note that when the autochunking estimation algorithm changes, the resulting
# chunk size will change... but it almost certainly won't be 1,000,000, the
# Dense1M estimate.  (The sum ought to remain the same though!)

--igdata "store(repart(I, <v:int64>[i]), AC0)"
_show_nodist(AC0)
aggregate(AC0, sum(v))

--igdata "store(redimension(I, <i:int64>[v]), AC1)"
_show_nodist(AC1)
aggregate(AC1, sum(i))

# Do a store of an autochunked query into a system catalog array with
# unspecified intervals.  Verify that the intervals are now specified and are
# the same as would have been stored had there been no pre-existing array in the
# catalog (that is, make sure chunk sizes are the same as AC1's).
create array AC2 <i:int64>[v=0:*]
_show_nodist(AC2)
--igdata "store(redimension(I, <i:int64>[v]), AC2)"
_show_nodist(AC2)
aggregate(AC2, sum(i))

--stop-query-logging


--cleanup
remove(I)
remove(IJ)
remove(IJK)

remove(TI)
remove(TIJ)
remove(TIJK)

remove(E0)
remove(E1)
remove(E2)

remove(AC0)
remove(AC1)
remove(AC2)
