--setup
# decile is all on one chunk
CREATE ARRAY decile < val : double > [ Bucket=0:9,10,0 ]
# ewh contains (i + j/100)
CREATE ARRAY EWH_Data < value : double> [ I=0:44,11,0, J=0:44,11,0 ]
store ( build ( EWH_Data, double(I) + double(J) / 100.0 ), EWH_Data)
scan(EWH_Data)  -- Inserted by scan_doctor

--test
project ( join ( apply ( build ( decile, double(Bucket) * 10.0 ), Min, val), apply ( build ( decile, (double(Bucket) + 1.0) * 10.0 ), Max, val)), Min, Max)


build(decile,double(Bucket)*10.0)
apply(build(decile,double(Bucket)*10.0),Min,val)
build(decile,(double(Bucket)+1.0)*10.0)
apply(build(decile,(double(Bucket)+1.0)*10.0),Max,val)
join(apply(build(decile,double(Bucket)*10.0),Min,val),apply(build(decile,(double(Bucket)+1.0)*10.0),Max,val))
project(join(apply(build(decile,double(Bucket)*10.0),Min,val),apply(build(decile,(double(Bucket)+1.0)*10.0),Max,val)),Min,Max)

store(project(join(apply(build(decile,double(Bucket)*10.0),Min,val),apply(build(decile,(double(Bucket)+1.0)*10.0),Max,val)),Min,Max), PROJECT)
scan(PROJECT)

cross_join(EWH_Data AS A, PROJECT AS B)

# fails during the cross_join
cross_join(EWH_Data AS A,project(join(apply(build(decile,double(Bucket)*10.0),Min,val),apply(build(decile,(double(Bucket)+1.0)*10.0),Max,val)),Min,Max) AS B)

filter ( cross_join ( EWH_Data AS A, project ( join ( apply ( build ( decile, double(Bucket) * 10.0 ), Min, val), apply ( build ( decile, (double(Bucket) + 1.0) * 10.0 ), Max, val)), Min, Max) AS B), A.value >= B.Min AND A.value < B.Max)

aggregate ( filter ( cross_join ( EWH_Data AS A, project ( join ( apply ( build ( decile, double(Bucket) * 10.0 ), Min, val), apply ( build ( decile, (double(Bucket) + 1.0) * 10.0 ), Max, val)), Min, Max) AS B), A.value >= B.Min AND A.value < B.Max), count(*), A.J, B.Bucket)

--cleanup
remove(decile)
remove(EWH_Data)
remove(PROJECT)
