--setup
--start-query-logging

create array DAY_STR_DFLT <daystr: string>[dummy=0:0,1,0, day=0:6,1,0]
create array DAY_STR_CCYC <daystr: string>[dummy=0:0,1,0, day=0:6,1,0] distribution col_cyclic

create array WEEK_STR_DFLT <weekstr: string>[dummy=0:0,1,0, week=0:3,1,0]
create array WEEK_STR_CCYC <weekstr: string>[dummy=0:0,1,0, week=0:3,1,0] distribution col_cyclic

store(build(DAY_STR_DFLT, 'DAY'+string(day)), DAY_STR_DFLT)
scan(DAY_STR_DFLT)

store(build(WEEK_STR_DFLT, 'WEEK'+string(week)), WEEK_STR_DFLT)
scan(WEEK_STR_DFLT)

create array DMONTH_DFLT <date:int64>[dummy=0:0,1,0, week=0:3; day=0:6,1,0]
store(build(DMONTH_DFLT, week*7+day), DMONTH_DFLT)
scan(DMONTH_DFLT)


--test

# col_cyclic by copying, as a test
store(WEEK_STR_DFLT, WEEK_STR_CCYC)
scan(WEEK_STR_CCYC)

# col_cyclic by copy to new array with keyword
store(WEEK_STR_DFLT, WEEK_STR_CCYC_KEY1, distribution:col_cyclic)
scan(WEEK_STR_CCYC_KEY1)

# col_cyclic by building, test is that it is the same as above
store(build(WEEK_STR_DFLT, 'WEEK'+string(week)), WEEK_STR_CCYC)
scan(WEEK_STR_CCYC)

# col_cyclic by building to new array with keyword
store(build(WEEK_STR_DFLT, 'WEEK'+string(week)), WEEK_STR_CCYC_KEY2, distribution:col_cyclic)
scan(WEEK_STR_CCYC_KEY2)

# col_cyclic by copying, again
store(DAY_STR_DFLT, DAY_STR_CCYC)
scan(DAY_STR_CCYC)

# col_cyclic by copying, again
store(DMONTH_DFLT, DMONTH_CCYC)
scan(DMONTH_CCYC)

#
# the total number of days in the week
#
aggregate(DAY_STR_DFLT, count(*))
aggregate(DAY_STR_CCYC, count(*))
aggregate(DAY_STR_CCYC, count(*), dummy,day)

#
# for CCYC, the max and min number of chunks on any instance should differ by at most 1
#
# max per instance <= min per instance + 2 (would be +1, but EBM is also a chunk)
project(apply(join(aggregate(summarize(DAY_STR_CCYC, by_instance:1), max(chunks)),\
                   aggregate(summarize(DAY_STR_CCYC, by_instance:1), min(chunks))),\
              check_good, chunks_max <= (chunks_min+2)),\
        check_good)

#
# cross joins to demonstrate that it is properly handled whether on
# LHS (where desired input is hashed) or on RHS (where desired input is replicated)
#

# cross join not col_cyclic
cross_join(DMONTH_DFLT as A, WEEK_STR_DFLT as B, A.week, B.week)

# cross join right col_cyclic
cross_join(DMONTH_DFLT as A, WEEK_STR_CCYC as B, A.week, B.week)

# cross join left col_cyclic
cross_join(DMONTH_CCYC as A, WEEK_STR_DFLT as B, A.week, B.week)

# cross join right, left col_cyclic
cross_join(DMONTH_CCYC as A, WEEK_STR_CCYC as B, A.week, B.week)

#
# and one level deeper on left
#

# triple cross join deeper on left, no col_cyclic
cross_join(cross_join(DMONTH_DFLT as A, WEEK_STR_DFLT as B, A.week, B.week) as C, DAY_STR_DFLT as W, C.day, W.day)

# triple cross join deeper on left, WEEK_STRING col_cyclic
cross_join(cross_join(DMONTH_DFLT as A, WEEK_STR_CCYC as B, A.week, B.week) as C, DAY_STR_DFLT as W, C.day, W.day)

# triple cross join deeper on left, WEEK_STRING col_cyclic
cross_join(cross_join(DMONTH_DFLT as A, WEEK_STR_DFLT as B, A.week, B.week) as C, DAY_STR_CCYC as W, C.day, W.day)

# triple cross join deeper on left, WEEK_STRING, WEEK_STRING col_cyclic
cross_join(cross_join(DMONTH_DFLT as A, WEEK_STR_CCYC as B, A.week, B.week) as C, DAY_STR_CCYC as W, C.day, W.day)

#
# and one level deeper on right
#

# triple cross join deeper on right, no col_cyclic
cross_join(DAY_STR_DFLT as W, cross_join(DMONTH_DFLT as A, WEEK_STR_DFLT as B, A.week, B.week) as C, W.day, C.day)

# triple cross join deeper on right, WEEK_STRING col_cyclic
cross_join(DAY_STR_DFLT as W, cross_join(DMONTH_DFLT as A, WEEK_STR_CCYC as B, A.week, B.week) as C, W.day, C.day)

# triple cross join deeper on right, WEEK_STRING col_cyclic
cross_join(DAY_STR_CCYC as W, cross_join(DMONTH_DFLT as A, WEEK_STR_DFLT as B, A.week, B.week) as C, W.day, C.day)

# triple cross join deeper on right, WEEK_STRING, WEEK_STRING col_cyclic
cross_join(DAY_STR_CCYC as W, cross_join(DMONTH_DFLT as A, WEEK_STR_CCYC as B, A.week, B.week) as C, W.day, C.day)




--cleanup
remove(DMONTH_DFLT)
remove(DMONTH_CCYC)
remove(WEEK_STR_DFLT)
remove(WEEK_STR_CCYC)
remove(WEEK_STR_CCYC_KEY1)
remove(WEEK_STR_CCYC_KEY2)
remove(DAY_STR_DFLT)
remove(DAY_STR_CCYC)
