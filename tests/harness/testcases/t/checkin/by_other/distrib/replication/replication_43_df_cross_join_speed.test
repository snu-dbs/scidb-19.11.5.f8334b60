--setup
--start-query-logging

create array DMONTH_DFLT <date:int64>[week=1:20*52,10,0; day=1:7,7,0]
store(build(DMONTH_DFLT, week*7+day), DMONTH_DFLT)
#scan(DMONTH_DFLT)

create array WEEK_STR_DFLT <weekstr: string>[week=1:20*52,10,0]
create array WEEK_DF <week: int64, weekstr: string>
create array WEEK_DF_REPL <week: int64, weekstr: string> distribution replicated
store(build(WEEK_STR_DFLT, 'WEEK'+string(week)), WEEK_STR_DFLT)
#scan(WEEK_STR_DFLT)

# replicate by copying
store(flatten(WEEK_STR_DFLT), WEEK_DF)
show(WEEK_DF)
store(flatten(WEEK_STR_DFLT), WEEK_DF_REPL)
show(WEEK_DF_REPL)

--test

# right default
--shell --store-all --command "TIMEFORMAT=%3R; time \
    (iquery -naq 'cross_join(DMONTH_DFLT, WEEK_DF)') 2>/tmp/repl43.1.txt"

# right replicated
--shell --store-all --command "TIMEFORMAT=%3R; time \
    (iquery -naq 'cross_join(DMONTH_DFLT, WEEK_DF_REPL)') 2>/tmp/repl43.2.txt"

# output times taken on terminal without affecting the .out file
# (developer feedback)
--shell --command "cat /tmp/repl43.1.txt >&2"
--shell --command "cat /tmp/repl43.2.txt >&2"

# to make the test pass/fail, ensure that the time for the first query
# is longer than the second outputs a 1 into the .out file when that
# is true
--shell --store-all --command "echo "scale=3; $(cat /tmp/repl43.1.txt) \
    > $(cat /tmp/repl43.2.txt)" | bc"

--cleanup
remove(DMONTH_DFLT)
remove(WEEK_STR_DFLT)
remove(WEEK_DF)
remove(WEEK_DF_REPL)
--shell --store-all --command "rm /tmp/repl43.1.txt /tmp/repl43.2.txt"
